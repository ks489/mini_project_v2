/*
 * generated by Xtext 2.10.0
 */
grammar InternalBlogPostDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.services.BlogPostDSLGrammarAccess;

}
@parser::members {
	private BlogPostDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(BlogPostDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel
:
{ before(grammarAccess.getDomainmodelRule()); }
	 ruleDomainmodel
{ after(grammarAccess.getDomainmodelRule()); } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainmodelAccess().getGroup()); }
		(rule__Domainmodel__Group__0)
		{ after(grammarAccess.getDomainmodelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleItemElement
entryRuleItemElement
:
{ before(grammarAccess.getItemElementRule()); }
	 ruleItemElement
{ after(grammarAccess.getItemElementRule()); } 
	 EOF 
;

// Rule ItemElement
ruleItemElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getItemElementAccess().getAlternatives()); }
		(rule__ItemElement__Alternatives)
		{ after(grammarAccess.getItemElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlog
entryRuleBlog
:
{ before(grammarAccess.getBlogRule()); }
	 ruleBlog
{ after(grammarAccess.getBlogRule()); } 
	 EOF 
;

// Rule Blog
ruleBlog 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlogAccess().getGroup()); }
		(rule__Blog__Group__0)
		{ after(grammarAccess.getBlogAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArticle
entryRuleArticle
:
{ before(grammarAccess.getArticleRule()); }
	 ruleArticle
{ after(grammarAccess.getArticleRule()); } 
	 EOF 
;

// Rule Article
ruleArticle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArticleAccess().getGroup()); }
		(rule__Article__Group__0)
		{ after(grammarAccess.getArticleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElementDeclaration
entryRuleElementDeclaration
:
{ before(grammarAccess.getElementDeclarationRule()); }
	 ruleElementDeclaration
{ after(grammarAccess.getElementDeclarationRule()); } 
	 EOF 
;

// Rule ElementDeclaration
ruleElementDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementDeclarationAccess().getGroup()); }
		(rule__ElementDeclaration__Group__0)
		{ after(grammarAccess.getElementDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTagImport
entryRuleTagImport
:
{ before(grammarAccess.getTagImportRule()); }
	 ruleTagImport
{ after(grammarAccess.getTagImportRule()); } 
	 EOF 
;

// Rule TagImport
ruleTagImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTagImportAccess().getGroup()); }
		(rule__TagImport__Group__0)
		{ after(grammarAccess.getTagImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTag
entryRuleTag
:
{ before(grammarAccess.getTagRule()); }
	 ruleTag
{ after(grammarAccess.getTagRule()); } 
	 EOF 
;

// Rule Tag
ruleTag 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTagAccess().getNameAssignment()); }
		(rule__Tag__NameAssignment)
		{ after(grammarAccess.getTagAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTitle
entryRuleTitle
:
{ before(grammarAccess.getTitleRule()); }
	 ruleTitle
{ after(grammarAccess.getTitleRule()); } 
	 EOF 
;

// Rule Title
ruleTitle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTitleAccess().getGroup()); }
		(rule__Title__Group__0)
		{ after(grammarAccess.getTitleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDate
entryRuleDate
:
{ before(grammarAccess.getDateRule()); }
	 ruleDate
{ after(grammarAccess.getDateRule()); } 
	 EOF 
;

// Rule Date
ruleDate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDateAccess().getGroup()); }
		(rule__Date__Group__0)
		{ after(grammarAccess.getDateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTags
entryRuleTags
:
{ before(grammarAccess.getTagsRule()); }
	 ruleTags
{ after(grammarAccess.getTagsRule()); } 
	 EOF 
;

// Rule Tags
ruleTags 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTagsAccess().getGroup()); }
		(rule__Tags__Group__0)
		{ after(grammarAccess.getTagsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTitleID
entryRuleTitleID
:
{ before(grammarAccess.getTitleIDRule()); }
	 ruleTitleID
{ after(grammarAccess.getTitleIDRule()); } 
	 EOF 
;

// Rule TitleID
ruleTitleID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getTitleIDAccess().getTitleidAssignment()); }
			(rule__TitleID__TitleidAssignment)
			{ after(grammarAccess.getTitleIDAccess().getTitleidAssignment()); }
		)
		(
			{ before(grammarAccess.getTitleIDAccess().getTitleidAssignment()); }
			(rule__TitleID__TitleidAssignment)*
			{ after(grammarAccess.getTitleIDAccess().getTitleidAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ItemElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItemElementAccess().getBlogParserRuleCall_0()); }
		ruleBlog
		{ after(grammarAccess.getItemElementAccess().getBlogParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getItemElementAccess().getArticleParserRuleCall_1()); }
		ruleArticle
		{ after(grammarAccess.getItemElementAccess().getArticleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Domainmodel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Domainmodel__Group__0__Impl
	rule__Domainmodel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Domainmodel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDomainmodelAccess().getTagImportAssignment_0()); }
	(rule__Domainmodel__TagImportAssignment_0)*
	{ after(grammarAccess.getDomainmodelAccess().getTagImportAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Domainmodel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Domainmodel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Domainmodel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getDomainmodelAccess().getItemElementAssignment_1()); }
		(rule__Domainmodel__ItemElementAssignment_1)
		{ after(grammarAccess.getDomainmodelAccess().getItemElementAssignment_1()); }
	)
	(
		{ before(grammarAccess.getDomainmodelAccess().getItemElementAssignment_1()); }
		(rule__Domainmodel__ItemElementAssignment_1)*
		{ after(grammarAccess.getDomainmodelAccess().getItemElementAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Blog__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Blog__Group__0__Impl
	rule__Blog__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Blog__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlogAccess().getBlogKeyword_0()); }
	'blog {'
	{ after(grammarAccess.getBlogAccess().getBlogKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blog__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Blog__Group__1__Impl
	rule__Blog__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Blog__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlogAccess().getDeclarationAssignment_1()); }
	(rule__Blog__DeclarationAssignment_1)
	{ after(grammarAccess.getBlogAccess().getDeclarationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blog__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Blog__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Blog__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlogAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getBlogAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Article__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Article__Group__0__Impl
	rule__Article__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Article__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArticleAccess().getArticlesKeyword_0()); }
	'articles {'
	{ after(grammarAccess.getArticleAccess().getArticlesKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Article__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Article__Group__1__Impl
	rule__Article__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Article__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArticleAccess().getDeclarationAssignment_1()); }
	(rule__Article__DeclarationAssignment_1)
	{ after(grammarAccess.getArticleAccess().getDeclarationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Article__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Article__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Article__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArticleAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getArticleAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementDeclaration__Group__0__Impl
	rule__ElementDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementDeclarationAccess().getTitleParserRuleCall_0()); }
	ruleTitle
	{ after(grammarAccess.getElementDeclarationAccess().getTitleParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementDeclaration__Group__1__Impl
	rule__ElementDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementDeclarationAccess().getGroup_1()); }
	(rule__ElementDeclaration__Group_1__0)?
	{ after(grammarAccess.getElementDeclarationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementDeclarationAccess().getGroup_2()); }
	(rule__ElementDeclaration__Group_2__0)?
	{ after(grammarAccess.getElementDeclarationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementDeclaration__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementDeclaration__Group_1__0__Impl
	rule__ElementDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementDeclarationAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getElementDeclarationAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementDeclaration__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementDeclarationAccess().getDateAssignment_1_1()); }
	(rule__ElementDeclaration__DateAssignment_1_1)
	{ after(grammarAccess.getElementDeclarationAccess().getDateAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ElementDeclaration__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementDeclaration__Group_2__0__Impl
	rule__ElementDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementDeclarationAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getElementDeclarationAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ElementDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getElementDeclarationAccess().getTagAssignment_2_1()); }
	(rule__ElementDeclaration__TagAssignment_2_1)
	{ after(grammarAccess.getElementDeclarationAccess().getTagAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TagImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TagImport__Group__0__Impl
	rule__TagImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TagImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTagImportAccess().getTagKeyword_0()); }
	'tag '
	{ after(grammarAccess.getTagImportAccess().getTagKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TagImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TagImport__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TagImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTagImportAccess().getTagParserRuleCall_1()); }
	ruleTag
	{ after(grammarAccess.getTagImportAccess().getTagParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Title__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Title__Group__0__Impl
	rule__Title__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleAccess().getTitleKeyword_0()); }
	'title='
	{ after(grammarAccess.getTitleAccess().getTitleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Title__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleAccess().getNameAssignment_1()); }
	(rule__Title__NameAssignment_1)
	{ after(grammarAccess.getTitleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Date__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group__0__Impl
	rule__Date__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getDateKeyword_0()); }
	'date='
	{ after(grammarAccess.getDateAccess().getDateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Date__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDateAccess().getNameAssignment_1()); }
	(rule__Date__NameAssignment_1)
	{ after(grammarAccess.getDateAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tags__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tags__Group__0__Impl
	rule__Tags__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tags__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTagsAccess().getTagsKeyword_0()); }
	'tags=['
	{ after(grammarAccess.getTagsAccess().getTagsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tags__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tags__Group__1__Impl
	rule__Tags__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tags__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTagsAccess().getNameAssignment_1()); }
	(rule__Tags__NameAssignment_1)
	{ after(grammarAccess.getTagsAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tags__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tags__Group__2__Impl
	rule__Tags__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Tags__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTagsAccess().getGroup_2()); }
	(rule__Tags__Group_2__0)*
	{ after(grammarAccess.getTagsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tags__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tags__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tags__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTagsAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getTagsAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tags__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tags__Group_2__0__Impl
	rule__Tags__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tags__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTagsAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getTagsAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tags__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tags__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tags__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTagsAccess().getNameAssignment_2_1()); }
	(rule__Tags__NameAssignment_2_1)
	{ after(grammarAccess.getTagsAccess().getNameAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Domainmodel__TagImportAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainmodelAccess().getTagImportTagImportParserRuleCall_0_0()); }
		ruleTagImport
		{ after(grammarAccess.getDomainmodelAccess().getTagImportTagImportParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Domainmodel__ItemElementAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainmodelAccess().getItemElementItemElementParserRuleCall_1_0()); }
		ruleItemElement
		{ after(grammarAccess.getDomainmodelAccess().getItemElementItemElementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Blog__DeclarationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlogAccess().getDeclarationElementDeclarationParserRuleCall_1_0()); }
		ruleElementDeclaration
		{ after(grammarAccess.getBlogAccess().getDeclarationElementDeclarationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Article__DeclarationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArticleAccess().getDeclarationElementDeclarationParserRuleCall_1_0()); }
		ruleElementDeclaration
		{ after(grammarAccess.getArticleAccess().getDeclarationElementDeclarationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__DateAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementDeclarationAccess().getDateDateParserRuleCall_1_1_0()); }
		ruleDate
		{ after(grammarAccess.getElementDeclarationAccess().getDateDateParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ElementDeclaration__TagAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementDeclarationAccess().getTagTagsParserRuleCall_2_1_0()); }
		ruleTags
		{ after(grammarAccess.getElementDeclarationAccess().getTagTagsParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tag__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTagAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getTagAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitleAccess().getNameTitleIDParserRuleCall_1_0()); }
		ruleTitleID
		{ after(grammarAccess.getTitleAccess().getNameTitleIDParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Date__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDateAccess().getNameBLOGDATETerminalRuleCall_1_0()); }
		RULE_BLOGDATE
		{ after(grammarAccess.getDateAccess().getNameBLOGDATETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tags__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTagsAccess().getNameTagCrossReference_1_0()); }
		(
			{ before(grammarAccess.getTagsAccess().getNameTagIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTagsAccess().getNameTagIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getTagsAccess().getNameTagCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tags__NameAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTagsAccess().getNameTagCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getTagsAccess().getNameTagIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTagsAccess().getNameTagIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getTagsAccess().getNameTagCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TitleID__TitleidAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitleIDAccess().getTitleidALPHANUMERICTerminalRuleCall_0()); }
		RULE_ALPHANUMERIC
		{ after(grammarAccess.getTitleIDAccess().getTitleidALPHANUMERICTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ALPHANUMERIC : ('0'..'9'|'A'..'Z'|'a'..'z')+ '-' ('0'..'9'|'A'..'Z'|'a'..'z')+;

RULE_BLOGDATE : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '-' '0'..'9' '0'..'9' '-' '0'..'9' '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
