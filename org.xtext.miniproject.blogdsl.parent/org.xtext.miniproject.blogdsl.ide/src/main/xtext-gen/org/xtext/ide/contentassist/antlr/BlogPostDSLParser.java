/*
 * generated by Xtext 2.10.0
 */
package org.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.ide.contentassist.antlr.internal.InternalBlogPostDSLParser;
import org.xtext.services.BlogPostDSLGrammarAccess;

public class BlogPostDSLParser extends AbstractContentAssistParser {

	@Inject
	private BlogPostDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalBlogPostDSLParser createParser() {
		InternalBlogPostDSLParser result = new InternalBlogPostDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getItemElementAccess().getAlternatives(), "rule__ItemElement__Alternatives");
					put(grammarAccess.getDomainmodelAccess().getGroup(), "rule__Domainmodel__Group__0");
					put(grammarAccess.getBlogAccess().getGroup(), "rule__Blog__Group__0");
					put(grammarAccess.getArticleAccess().getGroup(), "rule__Article__Group__0");
					put(grammarAccess.getElementDeclarationAccess().getGroup(), "rule__ElementDeclaration__Group__0");
					put(grammarAccess.getElementDeclarationAccess().getGroup_1(), "rule__ElementDeclaration__Group_1__0");
					put(grammarAccess.getElementDeclarationAccess().getGroup_2(), "rule__ElementDeclaration__Group_2__0");
					put(grammarAccess.getTagImportAccess().getGroup(), "rule__TagImport__Group__0");
					put(grammarAccess.getTitleAccess().getGroup(), "rule__Title__Group__0");
					put(grammarAccess.getDateAccess().getGroup(), "rule__Date__Group__0");
					put(grammarAccess.getTagsAccess().getGroup(), "rule__Tags__Group__0");
					put(grammarAccess.getTagsAccess().getGroup_2(), "rule__Tags__Group_2__0");
					put(grammarAccess.getDomainmodelAccess().getTagImportAssignment_0(), "rule__Domainmodel__TagImportAssignment_0");
					put(grammarAccess.getDomainmodelAccess().getItemElementAssignment_1(), "rule__Domainmodel__ItemElementAssignment_1");
					put(grammarAccess.getBlogAccess().getDeclarationAssignment_1(), "rule__Blog__DeclarationAssignment_1");
					put(grammarAccess.getArticleAccess().getDeclarationAssignment_1(), "rule__Article__DeclarationAssignment_1");
					put(grammarAccess.getElementDeclarationAccess().getDateAssignment_1_1(), "rule__ElementDeclaration__DateAssignment_1_1");
					put(grammarAccess.getElementDeclarationAccess().getTagAssignment_2_1(), "rule__ElementDeclaration__TagAssignment_2_1");
					put(grammarAccess.getTagAccess().getNameAssignment(), "rule__Tag__NameAssignment");
					put(grammarAccess.getTitleAccess().getNameAssignment_1(), "rule__Title__NameAssignment_1");
					put(grammarAccess.getDateAccess().getNameAssignment_1(), "rule__Date__NameAssignment_1");
					put(grammarAccess.getTagsAccess().getNameAssignment_1(), "rule__Tags__NameAssignment_1");
					put(grammarAccess.getTagsAccess().getNameAssignment_2_1(), "rule__Tags__NameAssignment_2_1");
					put(grammarAccess.getTitleIDAccess().getTitleidAssignment(), "rule__TitleID__TitleidAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalBlogPostDSLParser typedParser = (InternalBlogPostDSLParser) parser;
			typedParser.entryRuleDomainmodel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BlogPostDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BlogPostDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
