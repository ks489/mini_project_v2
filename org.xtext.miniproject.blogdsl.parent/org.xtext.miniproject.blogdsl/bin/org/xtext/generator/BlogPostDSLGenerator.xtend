/*
 * generated by Xtext 2.10.0
 */
package org.xtext.generator


import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import java.text.SimpleDateFormat
import java.util.Date

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BlogPostDSLGenerator extends AbstractGenerator {
	
	@Inject extension IQualifiedNameProvider
	
	Date now
	
	SimpleDateFormat dateFormatter
	
	def getLongDate(String date){
		dateFormatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss-04:00");
		return dateFormatter.parse(date);
	}
	
	def getCurrentLongDate(){
		now = new Date();
		dateFormatter = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss-04:00");
		return dateFormatter.format(now)
	}
	
	def compile(Domainmodel dm) '''
		«FOR b : dm.itemElement»
            «ie.compile»
        «ENDFOR»
	'''
	
	def compile(ItemElement ie) '''
		«IF ie.eContainer.fullyQualifiedName != null»
			---
			layout: post
			«IF ie.getClass == Blog»
				categories: blog «ie.declaration.compile»
			«ENDIF»
			«IF ie.getClass == Article»
				categories: articles «ie.declaration.compile»
			«ENDIF»
			---
        «ENDIF»
	'''
	
	def compile(ElementDeclaration ed)'''
			excerpt:
			tags: [
				«FOR tag : ed.tag SEPARATOR ','»
		            «tag.name»,
		        «ENDFOR»
			]		
			image:
			feature:
			date: «IF ie.date != null»«ie.date» getLongDate()«ELSE»getCurrentLongDate()«ENDIF»
			modified:
	'''
	
	
	override afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
	override beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(Domainmodel)) {
            fsa.generateFile(
                getShortDate + e.fullyQualifiedName.toString("/") + ".md",
                dm.compile)
        }
        
	}
}

class extensionMethods{
	def static bottles(int i){
		
	}
}
